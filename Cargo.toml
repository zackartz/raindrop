[workspace]
resolver = "2"

members = [
  "crates/engine",
  "crates/gfx_hal",
  "crates/renderer",
  "crates/resource_manager",
]

[workspace.dependencies]
ash = { version = "0.38" }
ash-window = "0.13.0"
color-eyre = "0.6.3"
winit = { version = "0.30.9", features = ["rwh_06"] }
raw-window-handle = "0.6"
gpu-allocator = { version = "0.27.0", features = ["vulkan"] }
glam = { version = "0.22", default-features = false, features = [
  "libm",
  "bytemuck",
] }
egui-ash-renderer = { version = "0.8.0", features = [
  "gpu-allocator",
  "dynamic-rendering",
] }
egui = "0.31"
bytemuck = { version = "1.21.0", features = ["derive"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["json"] }
thiserror = "2.0.12"


# # Enable incremental by default in release mode.
# [profile.release]
# incremental = true
# # HACK(eddyb) this is the default but without explicitly specifying it, Cargo
# # will treat the identical settings in `[profile.release.build-override]` below
# # as different sets of `rustc` flags and will not reuse artifacts between them.
# codegen-units = 256
#
# # Compile build-dependencies in release mode with the same settings
# # as regular dependencies (including the incremental enabled above).
# [profile.release.build-override]
# opt-level = 3
# incremental = true
# codegen-units = 256

# HACK(eddyb) reduce the number of linker exports and/or imports, by avoiding
# inter-CGU linkage, to stay under the 64Ki MSVC limit for `rustc_codegen_spirv`
# when building it in "debug mode" (only relevant to CI for now, realistically),
# i.e. working around this issue: https://github.com/rust-lang/rust/issues/53014.
[profile.dev]
# HACK(eddyb) fewer inter-crate exports/imports (not just inter-CGU), but sadly
# not configurable w/o breaking `Cargo.toml` parsing from non-nightly Cargo
# (moved to `.github/workflows/ci.yaml` as `RUSTFLAGS: -Zshare-generics=off`).
#
# rustflags = ["-Zshare-generics=off"]
# codegen-units = 1
opt-level = 3
